import os
import time
import requests
from colorama import Fore, Style, init

# Initialize Colorama
init(autoreset=True)

def clear_screen():
    """Clear the terminal screen."""
    os.system("cls" if os.name == "nt" else "clear")

def exit_application():
    """Exit the application gracefully."""
    print(Fore.RED + "Exiting the application...")
    time.sleep(1)
    clear_screen()
    exit()

def dirb_scan():
    """Perform Dirb scan."""
    clear_screen()
    site = input(Fore.YELLOW + "Enter the website to scan (include http/https): " + Style.RESET_ALL)
    
    # Ensure the URL starts with http:// or https://
    if not site.startswith(('http://', 'https://')):
        site = 'http://' + site

    # Run the dirb scan and save output to a file
    output_file = f"{site.replace('://', '_').replace('/', '_')}_dirb_output.txt"
    os.system(f"dirb {site} -o {output_file}")
    
    print(Fore.GREEN + f"Scan results saved to {output_file}" + Style.RESET_ALL)
    input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)

def nmap_scan():
    """Perform Nmap scan."""
    clear_screen()
    site = input(Fore.YELLOW + "Enter the website or IP to scan (include http/https): " + Style.RESET_ALL)
    
    # Ensure the URL starts with http:// or https:// for validation
    if not site.startswith(('http://', 'https://', 'ftp://')):
        site = 'http://' + site
    
    print(Fore.CYAN + """
    Choose the scan type:
    1. -sn       : No port scan.
    2. -sV       : Service version detection.
    3. -n        : Skip DNS resolution.
    4. -v        : Increase verbosity.
    5. -F        : Fast scan.
    6. --reason  : Show reasons for results.
    7. --open    : Show only open ports.
    """ + Style.RESET_ALL)
    
    scan_type = input(Fore.YELLOW + "Select a scan parameter: " + Style.RESET_ALL)
    scan_options = {
        "1": "-sn",
        "2": "-sV",
        "3": "-n",
        "4": "-v",
        "5": "-F",
        "6": "--reason",
        "7": "--open"
    }
    
    # Validate user selection and run the scan
    if scan_type in scan_options:
        output_file = f"{site.replace('://', '_').replace('/', '_')}_nmap_output.txt"
        os.system(f"nmap {scan_options[scan_type]} {site} -oN {output_file}")
        print(Fore.GREEN + f"Scan results saved to {output_file}" + Style.RESET_ALL)
    else:
        print(Fore.RED + "Invalid selection." + Style.RESET_ALL)

    input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)

def metasploit_console():
    """Launch Metasploit Framework Console."""
    clear_screen()
    print(Fore.YELLOW + "WARNING: Launching Metasploit can have unintended consequences." + Style.RESET_ALL)
    confirm = input(Fore.YELLOW + "Do you wish to continue? (y/n): " + Style.RESET_ALL)
    
    if confirm.lower() == 'y':
        os.system("msfconsole")
    else:
        print(Fore.RED + "Operation cancelled." + Style.RESET_ALL)
    
    input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)


def sqlmap_scan():
    """Perform SQLMap scan."""
    clear_screen()
    site = input(Fore.YELLOW + "Enter the website to scan (include http/https): " + Style.RESET_ALL)
    
    if not site.startswith(('http://', 'https://')):
        site = 'http://' + site
    
    output_file = f"{site.replace('://', '_').replace('/', '_')}_sqlmap_output.txt"
    os.system(f'sqlmap {site} --dbs --no-cast --risk=3 --level=5 --skip-waf --random-agent --tamper="space2morecomment,between,space2morehash,space2plus" -o {output_file}')
    
    print(Fore.GREEN + f"Scan results saved to {output_file}" + Style.RESET_ALL)
    input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)


def hydra_attack():
    """Perform Hydra attack."""
    clear_screen()
    print(Fore.CYAN + "1. FTP Attack")
    print("2. SSH Attack" + Style.RESET_ALL)
    
    attack_type = input(Fore.YELLOW + "Select attack type: " + Style.RESET_ALL)
    ip = input(Fore.YELLOW + "Enter the IP address: " + Style.RESET_ALL)
    user = input(Fore.YELLOW + "Enter the username: " + Style.RESET_ALL)
    password_list = input(Fore.YELLOW + "Enter the path to the password list (e.g., /home/user/pass.txt): " + Style.RESET_ALL)
    
    # Check if the password list exists
    if not os.path.exists(password_list):
        print(Fore.RED + "Password list file not found." + Style.RESET_ALL)
        return
    
    output_file = f"{ip}_{attack_type}_hydra_output.txt"
    
    if attack_type == "1":
        os.system(f"hydra -l {user} -P {password_list} ftp://{ip} -o {output_file}")
    elif attack_type == "2":
        os.system(f"hydra -l {user} -P {password_list} ssh://{ip} -o {output_file}")
    else:
        print(Fore.RED + "Invalid attack type." + Style.RESET_ALL)
        return
    
    print(Fore.GREEN + f"Attack results saved to {output_file}" + Style.RESET_ALL)
    input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)

def admin_panel_finder():
    """Find admin panels with additional paths, error handling, and improved performance."""
    clear_screen()
    url = input(Fore.LIGHTGREEN_EX + "Enter the site to scan for admin panels: " + Style.RESET_ALL).strip()

    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url

    # Expanded list of common admin paths
    paths = (
        'admin/', 'administrator/', 'login.php', 'adminarea/', 'controlpanel.php',
        'admin_login/', 'adminpanel/', 'manager/', 'cms/', 'dashboard/',
        'moderator/', 'webadmin/', 'adminarea/login.php', 'panel/', 'backend/',
        'user/', 'auth/', 'manage/', 'admincp/', 'secure/', 'panel_admin/',
        'login/', 'admin_login.php', 'adminpanel.php', 'admin_area/',
        'admin-panel/', 'control/', 'adminstrator/', 'superuser/', 'admin1/', 'sysadmin/'
    )
    
    found_paths = []
    retries = 3  # Retry mechanism for failed requests
    
    print(Fore.CYAN + "\nScanning for admin panels...\n" + Style.RESET_ALL)
    for path in paths:
        full_url = f"{url.rstrip('/')}/{path}"
        attempt = 0
        
        while attempt < retries:
            try:
                response = requests.get(full_url, timeout=10)
                if response.status_code == 200:
                    print(Fore.GREEN + f"[✔] Found: {full_url}" + Style.RESET_ALL)
                    found_paths.append(full_url)
                    break
                elif response.status_code in [301, 302]:
                    print(Fore.YELLOW + f"[~] Redirected: {full_url}" + Style.RESET_ALL)
                    break
                else:
                    print(Fore.RED + f"[✘] Not Found: {full_url}" + Style.RESET_ALL)
                    break
            except requests.exceptions.RequestException as e:
                attempt += 1
                if attempt < retries:
                    print(Fore.YELLOW + f"[!] Error accessing {full_url}. Retrying... ({attempt}/{retries})" + Style.RESET_ALL)
                    time.sleep(2)  # Wait before retrying
                else:
                    print(Fore.RED + f"[!] Error accessing {full_url}: {e}" + Style.RESET_ALL)
                    break
    
    # Display found paths
    if found_paths:
        print(Fore.GREEN + "\nAdmin panels found:" + Style.RESET_ALL)
        for path in found_paths:
            print(Fore.GREEN + f"  - {path}" + Style.RESET_ALL)
        
        # Save the results to a file
        output_file = f"admin_panels_found_{url.replace('://', '_').replace('/', '_')}.txt"
        with open(output_file, "w") as file:
            for path in found_paths:
                file.write(f"{path}\n")
        
        print(Fore.GREEN + f"\nResults saved to {output_file}" + Style.RESET_ALL)
    
    else:
        print(Fore.RED + "\nNo admin panels found." + Style.RESET_ALL)
    
    input(Fore.GREEN + "\nPress Enter to return to the menu..." + Style.RESET_ALL)

def no_redirect_scanner():
    """Perform a No Redirect Scan with more robust handling."""
    clear_screen()
    site = input(Fore.YELLOW + "Enter the website (No CPanel/WordPress/Joomla). Type 'X' to exit: " + Style.RESET_ALL).strip()
    
    if site.lower() == "x":
        exit_application()

    if not site.startswith("http://") and not site.startswith("https://"):
        site = "http://" + site

    panel = input(Fore.YELLOW + "Enter the panel extension (e.g., index.php, panel.php): " + Style.RESET_ALL).strip()
    admin = input(Fore.YELLOW + "Enter the admin panel directory (e.g., 'admin'): " + Style.RESET_ALL).strip()

    if not panel or not admin:
        print(Fore.RED + "Both panel extension and admin directory are required." + Style.RESET_ALL)
        input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)
        return

    url = f"{site.rstrip('/')}/{admin}/{panel}"
    
    print(Fore.CYAN + f"\nChecking URL: {url}\n" + Style.RESET_ALL)
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            print(Fore.BLUE + "[✔] No Redirect Successful: " + url + Style.RESET_ALL)
        elif response.status_code in [301, 302]:
            print(Fore.YELLOW + f"[~] Redirect Detected: {url}" + Style.RESET_ALL)
        else:
            print(Fore.RED + f"[✘] No Redirect Failed: {url} (Status Code: {response.status_code})" + Style.RESET_ALL)
    except requests.exceptions.RequestException as e:
        print(Fore.RED + f"[!] Error: {e}" + Style.RESET_ALL)
    
    input(Fore.GREEN + "\nPress Enter to return to the menu..." + Style.RESET_ALL)


def main():
    """Main menu loop."""
    while True:
        clear_screen()
        print(Fore.GREEN + """
            ██████╗ ███████╗███╗   ██╗████████╗███████╗███████╗████████╗██╗███╗   ██╗ ██████╗ 
            ██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║████╗  ██║██╔════╝ 
            ██████╔╝█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ██║   ██║██╔██╗ ██║██║  ███╗
            ██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██║   ██║██║╚██╗██║██║   ██║
            ██║     ███████╗██║ ╚████║   ██║   ███████╗███████║   ██║   ██║██║ ╚████║╚██████╔╝
            ╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝
        """ + Style.RESET_ALL)

        print(Fore.RED + "Instagram: @f3rrkan" + Style.RESET_ALL)
        print("\nSelect an option:")
        print("1. Dirb - Web Content Scanner")
        print("2. Nmap - Network Scanner")
        print("3. Metasploit Console")
        print("4. SQLMap - SQL Injection Tool")
        print("5. Hydra - Login Cracker")
        print("6. Admin Panel Finder")
        print("7. No Redirect Scanner")
        print("\nType 'X' to exit.\n")

        selection = input(Fore.YELLOW + "Enter your selection: " + Style.RESET_ALL).upper()
        if selection == "X":
            exit_application()
        elif selection == "1":
            dirb_scan()
        elif selection == "2":
            nmap_scan()
        elif selection == "3":
            metasploit_console()
        elif selection == "4":
            sqlmap_scan()
        elif selection == "5":
            hydra_attack()
        elif selection == "6":
            admin_panel_finder()
        elif selection == "7":
            no_redirect_scanner()
        else:
            print(Fore.RED + "Invalid selection. Try again." + Style.RESET_ALL)
            time.sleep(2)

if __name__ == "__main__":
    main()
